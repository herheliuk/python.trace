---------------------- call ----------------------
calling _tracetracer.py
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 3,
    "code": "from ast_functions import find_python_imports, get_source_code_cache"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "find_python_imports": "<function>",
        "get_source_code_cache": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 5,
    "code": "import os, sys, runpy, json, io"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "os": "<module>",
        "sys": "<module>",
        "runpy": "<module>",
        "json": "<module>",
        "io": "<module>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 6,
    "code": "from pathlib import Path"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "Path": "<type>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 7,
    "code": "from contextlib import contextmanager"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "contextmanager": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 8,
    "code": "from functools import partial"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "partial": "<type>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 9,
    "code": "from collections import defaultdict"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "defaultdict": "<type>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 10,
    "code": "from traceback import format_tb"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "format_tb": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 12,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 13,
    "code": "def apply_dir(target_dir: Path):\n    original_dir = Path.cwd()\n    target_dir = str(target_dir)\n    if target_dir not in sys.path:\n        sys.path.insert(0, target_dir)\n        os.chdir(target_dir)\n    try:\n        yield\n    finally:\n        if target_dir in sys.path:\n            sys.path.remove(target_dir)\n            os.chdir(original_dir)"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 12,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 13,
    "code": "def apply_dir(target_dir: Path):\n    original_dir = Path.cwd()\n    target_dir = str(target_dir)\n    if target_dir not in sys.path:\n        sys.path.insert(0, target_dir)\n        os.chdir(target_dir)\n    try:\n        yield\n    finally:\n        if target_dir in sys.path:\n            sys.path.remove(target_dir)\n            os.chdir(original_dir)"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "apply_dir": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 26,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 27,
    "code": "def apply_trace(trace_function):\n    old_trace = sys.gettrace()\n    sys.settrace(trace_function)\n    try:\n        yield\n    finally:\n        sys.settrace(old_trace)"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 26,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 27,
    "code": "def apply_trace(trace_function):\n    old_trace = sys.gettrace()\n    sys.settrace(trace_function)\n    try:\n        yield\n    finally:\n        sys.settrace(old_trace)"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "apply_trace": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 35,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 36,
    "code": "def step_io(output_file: Path, interactive: bool):\n    if interactive:\n        def print_step(text):\n            print(text)\n            \n        def input_step(text):\n            return input(text)\n        \n        def finalize():\n            pass\n    else:\n        buffer = io.StringIO()\n        \n        def print_step(text):\n            buffer.write(text + '\\n')\n            \n        def input_step(text):\n            buffer.write(text + '\\n')\n            \n        def finalize():\n            output_file.write_bytes(buffer.getvalue().encode('utf-8'))\n            buffer.close()\n\n    try:\n        yield print_step, input_step\n    finally:\n        finalize()"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 35,
    "code": "_@contextmanager"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 36,
    "code": "def step_io(output_file: Path, interactive: bool):\n    if interactive:\n        def print_step(text):\n            print(text)\n            \n        def input_step(text):\n            return input(text)\n        \n        def finalize():\n            pass\n    else:\n        buffer = io.StringIO()\n        \n        def print_step(text):\n            buffer.write(text + '\\n')\n            \n        def input_step(text):\n            buffer.write(text + '\\n')\n            \n        def finalize():\n            output_file.write_bytes(buffer.getvalue().encode('utf-8'))\n            buffer.close()\n\n    try:\n        yield print_step, input_step\n    finally:\n        finalize()"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "step_io": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 64,
    "code": "def default_json_handler(obj):\n    typename = type(obj).__name__\n    return f\"<{typename}>\""
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "default_json_handler": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 68,
    "code": "json_pretty = partial(json.dumps, indent=4, default=default_json_handler)"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "json_pretty": "<partial>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 70,
    "code": "def filter_scope(scope):\n    startswith = str.startswith\n    return {key: value for key, value in scope.items() if not startswith(key, \"__\")}"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "filter_scope": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 74,
    "code": "def diff_scope(old_scope: dict, new_scope: dict):\n    if old_scope is new_scope:\n        return {}\n    changes = {key: value for key, value in new_scope.items() if old_scope.get(key) != value}\n    deleted = {key: \"<deleted>\" for key in old_scope.keys() - new_scope.keys()}\n    return {**changes, **deleted}"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "diff_scope": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 81,
    "code": "def main(debug_script_path: Path, output_file: Path, interactive = None):\n    paths_to_trace = find_python_imports(debug_script_path)\n    str_paths_to_trace = {str(path) for path in paths_to_trace}\n\n    source_code_cache = {str(path): get_source_code_cache(path) for path in paths_to_trace}\n    \n    last_files = defaultdict(dict)\n    \n    with step_io(output_file, interactive) as (print_step, input_step):\n        def trace_function(frame, event, arg):\n            code_filepath = frame.f_code.co_filename\n            if code_filepath not in str_paths_to_trace:\n                return\n\n            code_name = frame.f_code.co_name\n            filename = Path(code_filepath).name\n\n            is_not_module = code_name != '<module>'\n\n            if is_not_module:\n                target = code_name\n                function_name = None if code_name.startswith('<') else code_name\n                current_locals = dict(frame.f_locals)\n            else:\n                target = filename\n                function_name = None\n                current_locals = {}\n\n            current_globals = dict(frame.f_globals)\n\n            last_functions = last_files[code_filepath]\n\n            if event in ('line', 'return'):\n                old_globals, old_locals = last_functions[function_name]\n\n                global_changes = diff_scope(old_globals, current_globals)\n                local_changes = diff_scope(old_locals, current_locals) if is_not_module else {}\n\n                if global_changes or local_changes:\n                    payload = {'filename': filename}\n                    if function_name:\n                        payload['function'] = function_name\n                    if global_changes:\n                        payload['globals'] = global_changes\n                    if local_changes:\n                        payload['locals'] = local_changes\n                    print_step(json_pretty(payload))\n\n            print_step(f\"{f' {event} ':-^50}\")\n\n            if event == 'line':\n                input_step(json_pretty({\n                    'filename': filename,\n                    **({'function': function_name} if function_name else {}),\n                    'line': frame.f_lineno,\n                    'code': source_code_cache[code_filepath][frame.f_lineno]\n                }))\n                last_functions[function_name] = (current_globals, current_locals)\n                return\n\n            elif event == 'call':\n                input_step(f\"calling {target}\")\n                if current_locals:\n                    print_step(json_pretty(current_locals))\n                last_functions.setdefault(function_name, (current_globals, current_locals))\n                return trace_function\n\n            elif event == 'return':\n                print_step(f\"{target} returned {arg}\")\n                del last_functions[function_name]\n                return\n\n            elif event == 'exception':\n                exc_type, exc_value, exc_traceback = arg\n                print_step(f\"{exc_type.__name__}: {exc_value}\")\n                print_step(''.join(format_tb(exc_traceback)))\n                return\n\n        with apply_dir(debug_script_path.parent), apply_trace(trace_function):\n            try:\n                runpy.run_path(debug_script_path)\n            except KeyboardInterrupt:\n                sys.exit(1)"
}
{
    "filename": "_tracetracer.py",
    "globals": {
        "main": "<function>"
    }
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 165,
    "code": "print(__name__)"
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "line": 167,
    "code": "if __name__ == '__main__':\n    if len(sys.argv) != 2:\n        print(f'Usage: python {sys.argv[0]} <script to debug>')\n        sys.exit(1)\n\n    debug_script_path = Path(sys.argv[1]).resolve()\n\n    if not debug_script_path.exists():\n        print(f'Error: File \"{debug_script_path.name}\" does not exist.')\n        sys.exit(1)\n        \n    interactive = input('Step through? ')\n    \n    output_file = Path.cwd() / (debug_script_path.stem + '.trace.txt')\n        \n    main(debug_script_path, output_file, interactive)"
}
--------------------- return ---------------------
_tracetracer.py returned None
---------------------- call ----------------------
calling apply_trace
{
    "trace_function": "<function>",
    "old_trace": null
}
---------------------- line ----------------------
{
    "filename": "_tracetracer.py",
    "function": "apply_trace",
    "line": 33,
    "code": "sys.settrace(old_trace)"
}
